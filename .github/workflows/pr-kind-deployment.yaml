name: PR Kind Deployment Test

on:
  pull_request_target:
    branches: [main]

jobs:
  deploy-on-kind:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'

      - name: Install uv
        run: |
          python -m pip install --upgrade pip
          pip install uv

      - name: Install kubectl
        uses: azure/setup-kubectl@v4

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Create Kind cluster
        uses: helm/kind-action@v1
        with:
          cluster_name: agent-platform
          wait: 300s

      - name: Verify Kind cluster
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: Set up environment file
        working-directory: kagenti/installer/app
        run: |
          cp .env_template .env
          echo "GITHUB_USER=fake" >> .env
          echo "GITHUB_TOKEN=fake" >> .env
          echo "OPENAI_API_KEY=fake" >> .env
          echo "AGENT_NAMESPACES=team1,team2" >> .env

      - name: Run kagenti-installer
        working-directory: kagenti/installer
        run: |
          uv run kagenti-installer --silent --use-existing-cluster

      - name: Wait for critical deployments to be ready
        run: |
          echo "Waiting for critical deployments to be ready (1/1)..."

          # List of critical deployments in format "namespace/deployment"
          CRITICAL_DEPLOYMENTS=(
            "cert-manager/cert-manager"
            "cert-manager/cert-manager-cainjector"
            "cert-manager/cert-manager-webhook"
            "cr-system/registry"
            "gateway-system/mcp-gateway-istio"
            "istio-system/istiod"
            "istio-system/kiali"
            "istio-system/prometheus"
            "kagenti-system/agentic-platform-controller-manager"
            "kagenti-system/http-istio"
            "kagenti-system/kagenti-ui"
            "kagenti-system/mcp-inspector"
            "kagenti-system/otel-collector"
            "mcp-system/mcp-broker-router"
            "mcp-system/mcp-controller"
            "spire-server/spire-spiffe-oidc-discovery-provider"
            "spire-server/spire-tornjak-frontend"
            "tekton-pipelines-resolvers/tekton-pipelines-remote-resolvers"
            "tekton-pipelines/tekton-events-controller"
            "tekton-pipelines/tekton-pipelines-controller"
            "tekton-pipelines/tekton-pipelines-webhook"
          )

          # Wait for each deployment
          for deployment in "${CRITICAL_DEPLOYMENTS[@]}"; do
            namespace=$(echo $deployment | cut -d'/' -f1)
            name=$(echo $deployment | cut -d'/' -f2)
            echo "Waiting for $deployment..."
            kubectl wait --for=condition=available --timeout=300s deployment/$name -n $namespace
          done

          echo "All critical deployments are ready!"
          kubectl get deployments --all-namespaces

      - name: Collect logs on failure
        if: failure()
        run: |
          echo "=== Collecting logs for debugging ==="
          kubectl get events --all-namespaces --sort-by='.lastTimestamp'
          echo "=== Pod descriptions ==="
          kubectl describe pods --all-namespaces
          echo "=== Failed pod logs ==="
          kubectl logs --all-namespaces --selector='!job-name' --tail=100 || true
